/*
 * ConnectWindow.java
 *
 * Created on Jan 18, 2011, 10:32:27 PM
 */

/**
 * @author Joe Stein
 */

package org.mcwebmin.desktop;

import java.awt.Cursor;
import java.io.IOException;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author joe
 */
public class ConnectWindow extends javax.swing.JFrame implements DataHandler {

   private JDialog prompt;
   private Connection cxn;
   private MainWindow parent;

   /** Creates new form ConnectWindow */
   public ConnectWindow(MainWindow p)
   {
      parent = p;
      initComponents();
      hostField.setText("");
      portField.setText("");
      updateStatus("");
      this.setVisible(true);
   }

    private void updateStatus(final String status)
    {
       SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            statusLabel.setText(status);
         }
       });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      statusLabel = new javax.swing.JLabel();
      connectButton = new javax.swing.JButton();
      hostField = new javax.swing.JTextField();
      portField = new javax.swing.JTextField();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

      jLabel1.setFont(new java.awt.Font("Arial", 1, 14));
      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setText("Connect");

      jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
      jLabel2.setText("Host:");

      jLabel3.setFont(new java.awt.Font("Arial", 1, 12));
      jLabel3.setText("Port:");

      jLabel4.setFont(new java.awt.Font("Arial", 1, 12));
      jLabel4.setText("Status:");

      statusLabel.setText("statusLabel");

      connectButton.setText("Connect");
      connectButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            connectButtonActionPerformed(evt);
         }
      });

      hostField.setText("hostField");

      portField.setText("portField");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addComponent(jLabel4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(jLabel2)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(layout.createSequentialGroup()
                     .addComponent(jLabel3)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(connectButton))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(12, 12, 12)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(connectButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(statusLabel))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectButtonActionPerformed
    {//GEN-HEADEREND:event_connectButtonActionPerformed
      updateStatus("Connecting...");
      lockFields();
      this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      try {
         cxn = new Connection(hostField.getText(), Integer.valueOf(portField.getText()),this,5000);
      } catch (SocketTimeoutException ste)
      {
         updateStatus("Connection timed out.");
      } catch (UnknownHostException ex)
      {
         updateStatus("Could not reach host.");
         //Logger.getLogger(ConnectWindow.class.getName()).log(Level.SEVERE, null, ex);
      } catch (ConnectException ce)
      {
         if (ce.getMessage().equals("Connection timed out"))
         {
            updateStatus("Connection timed out.");
         }
      } catch (IOException ex)
      {
         if (ex.getMessage().equals("Connection refused"))
         {
            updateStatus("Connection refused.");
         } else {
            ex.printStackTrace();
            updateStatus("I/O exception occurred.");
         }
         //Logger.getLogger(ConnectWindow.class.getName()).log(Level.SEVERE, null, ex);
      } finally
      {
         unlockFields();
         this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    }//GEN-LAST:event_connectButtonActionPerformed

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton connectButton;
   private javax.swing.JTextField hostField;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JTextField portField;
   private javax.swing.JLabel statusLabel;
   // End of variables declaration//GEN-END:variables

   private void lockFields()
   {
      SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            connectButton.setEnabled(false);
            portField.setEnabled(false);
            hostField.setEnabled(false);
         }
       });
   }

   private void unlockFields()
   {
      SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            connectButton.setEnabled(true);
            portField.setEnabled(true);
            hostField.setEnabled(true);
         }
       });
   }

   public void handle(int code, String... message)
   {
      unlockFields();
      switch (code)
      {
         case DataHandler.BAD_PASSWORD:
            JOptionPane.showMessageDialog(Utilities.INVISIFRAME, "Incorrect password.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
         case DataHandler.END_OF_STREAM:
            if (prompt != null)
            {
               prompt.dispose();
               prompt = null;
            }
            updateStatus("Disconnected.");
            break;
         case DataHandler.PASSWORD_PROMPT:
            prompt();
            break;
         case DataHandler.TIMEOUT:
            JOptionPane.showMessageDialog(Utilities.INVISIFRAME, "Took too long to log in.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
         case DataHandler.AUTHENTICATED:
            cxn.setHandler(parent);
            parent.setConnection(cxn);
            dispose();
            break;
         default:
            System.out.println(code + ": " + message);
      }
   }

   private void prompt()
   {
      prompt = new PasswordPrompt(Utilities.INVISIFRAME,true,this);
   }

   public void send(String command)
   {
      cxn.sendCommand(command);
   }

}
