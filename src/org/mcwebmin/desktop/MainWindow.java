/*
 * MainWindow.java
 *
 * Created on Jan 18, 2011, 10:26:07 PM
 */

package org.mcwebmin.desktop;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.mcwebmin.desktop.gui.PreferencesWindow;

/**
 *
 * @author joe
 */
public class MainWindow extends javax.swing.JFrame implements DataHandler {

   private static final int REROUTE_NONE = 0;
   private static final int REROUTE_PLAYERSLISTENER = 1;
   private Connection cxn;
   private volatile int reroute = REROUTE_NONE;
   private PlayersListener playersListener;
   private volatile Thread playersListenerThread;
   private DefaultListModel playerListModel;
   private MineQueryCommunicator mqc;
   
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        playerListModel = new DefaultListModel();
        playerList.setModel(playerListModel);
        playersListenerThread = new Thread();
        updateTitle("MC Remote Admin");
        setComponentsEnabled(false);
        this.setVisible(true);
    }

   protected synchronized void setReroute(int type)
   {
       reroute = type;
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      pluginsPane = new javax.swing.JTabbedPane();
      statusPanel = new javax.swing.JPanel();
      settingsPanel = new javax.swing.JPanel();
      pluginPanel = new javax.swing.JPanel();
      advancedPanel = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      playerList = new javax.swing.JList();
      jLabel3 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      commandField = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      sendButton = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      logArea = new javax.swing.JTextArea();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      connectMenuItem = new javax.swing.JMenuItem();
      preferencesMenuItem = new javax.swing.JMenuItem();
      quitMenuItem = new javax.swing.JMenuItem();
      jMenu3 = new javax.swing.JMenu();
      jMenuItem5 = new javax.swing.JMenuItem();
      jMenuItem6 = new javax.swing.JMenuItem();
      jMenuItem7 = new javax.swing.JMenuItem();
      jMenuItem8 = new javax.swing.JMenuItem();
      jMenuItem9 = new javax.swing.JMenuItem();
      jMenuItem10 = new javax.swing.JMenuItem();
      toolsMenu = new javax.swing.JMenu();
      jMenuItem2 = new javax.swing.JMenuItem();
      jMenuItem3 = new javax.swing.JMenuItem();
      jMenuItem1 = new javax.swing.JMenuItem();
      jMenuItem4 = new javax.swing.JMenuItem();
      jMenu4 = new javax.swing.JMenu();
      jMenu5 = new javax.swing.JMenu();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      pluginsPane.setFocusable(false);
      pluginsPane.setRequestFocusEnabled(false);

      javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
      statusPanel.setLayout(statusPanelLayout);
      statusPanelLayout.setHorizontalGroup(
         statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 431, Short.MAX_VALUE)
      );
      statusPanelLayout.setVerticalGroup(
         statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 304, Short.MAX_VALUE)
      );

      pluginsPane.addTab("Status", statusPanel);

      javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
      settingsPanel.setLayout(settingsPanelLayout);
      settingsPanelLayout.setHorizontalGroup(
         settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 431, Short.MAX_VALUE)
      );
      settingsPanelLayout.setVerticalGroup(
         settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 304, Short.MAX_VALUE)
      );

      pluginsPane.addTab("Settings", settingsPanel);

      javax.swing.GroupLayout pluginPanelLayout = new javax.swing.GroupLayout(pluginPanel);
      pluginPanel.setLayout(pluginPanelLayout);
      pluginPanelLayout.setHorizontalGroup(
         pluginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 431, Short.MAX_VALUE)
      );
      pluginPanelLayout.setVerticalGroup(
         pluginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 304, Short.MAX_VALUE)
      );

      pluginsPane.addTab("Plugins", pluginPanel);

      javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
      advancedPanel.setLayout(advancedPanelLayout);
      advancedPanelLayout.setHorizontalGroup(
         advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 431, Short.MAX_VALUE)
      );
      advancedPanelLayout.setVerticalGroup(
         advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 304, Short.MAX_VALUE)
      );

      pluginsPane.addTab("Advanced", advancedPanel);

      jScrollPane2.setViewportView(playerList);

      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel3.setText("Connected Users");

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      commandField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            commandFieldKeyReleased(evt);
         }
      });

      jLabel2.setText("Command:");

      sendButton.setText("Send");
      sendButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            sendButtonActionPerformed(evt);
         }
      });

      logArea.setColumns(20);
      logArea.setRows(5);
      jScrollPane1.setViewportView(logArea);

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(commandField, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                  .addGap(12, 12, 12)
                  .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(sendButton)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel2)
                  .addComponent(commandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );

      jMenu1.setText("File");

      connectMenuItem.setText("Connect");
      connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            connectMenuItemActionPerformed(evt);
         }
      });
      jMenu1.add(connectMenuItem);

      preferencesMenuItem.setText("Preferences");
      preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            preferencesMenuItemActionPerformed(evt);
         }
      });
      jMenu1.add(preferencesMenuItem);

      quitMenuItem.setText("Quit");
      quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            quitMenuItemActionPerformed(evt);
         }
      });
      jMenu1.add(quitMenuItem);

      jMenuBar1.add(jMenu1);

      jMenu3.setText("Server");

      jMenuItem5.setText("Stop");
      jMenu3.add(jMenuItem5);

      jMenuItem6.setText("Start");
      jMenu3.add(jMenuItem6);

      jMenuItem7.setText("Restart");
      jMenu3.add(jMenuItem7);

      jMenuItem8.setText("Backup");
      jMenu3.add(jMenuItem8);

      jMenuItem9.setText("Upgrade");
      jMenu3.add(jMenuItem9);

      jMenuItem10.setText("Save");
      jMenu3.add(jMenuItem10);

      jMenuBar1.add(jMenu3);

      toolsMenu.setText("Tools");

      jMenuItem2.setText("Backup Manager");
      toolsMenu.add(jMenuItem2);

      jMenuItem3.setText("Upgrade...");
      toolsMenu.add(jMenuItem3);

      jMenuItem1.setText("World Manager");
      toolsMenu.add(jMenuItem1);

      jMenuItem4.setText("Plugin Manager");
      toolsMenu.add(jMenuItem4);

      jMenuBar1.add(toolsMenu);

      jMenu4.setText("Advanced");
      jMenuBar1.add(jMenu4);

      jMenu5.setText("Help");
      jMenuBar1.add(jMenu5);

      setJMenuBar(jMenuBar1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(pluginsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                     .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(21, 21, 21)
                  .addComponent(jLabel3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(pluginsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitMenuItemActionPerformed
       System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectMenuItemActionPerformed
    {//GEN-HEADEREND:event_connectMenuItemActionPerformed
       if (cxn == null)
       {
          new ConnectWindow(this);
       } else
       {
          disconnect();
       }
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendButtonActionPerformed
    {//GEN-HEADEREND:event_sendButtonActionPerformed
       send(commandField.getText());
       SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            commandField.setText("");
         }
       });
    }//GEN-LAST:event_sendButtonActionPerformed

    private void commandFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_commandFieldKeyReleased
    {//GEN-HEADEREND:event_commandFieldKeyReleased
       if (evt.getKeyCode() == KeyEvent.VK_ENTER)
       {
          send(commandField.getText());
          SwingUtilities.invokeLater(new Runnable() {
            public void run()
            {
               commandField.setText("");
            }
          });
       }
    }//GEN-LAST:event_commandFieldKeyReleased

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_preferencesMenuItemActionPerformed
    {//GEN-HEADEREND:event_preferencesMenuItemActionPerformed
       new PreferencesWindow();
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

   private void updateTitle(final String newTitle)
   {
      SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            setTitle(newTitle);
         }
      });
   }

    public synchronized void setConnection(Connection c)
    {
       cxn = c;
       playersListener = new MineQueryPlayersListener();
       mqc = new MineQueryCommunicator(cxn.getIp(),Integer.valueOf(
               Utilities.getPref("minequery_port","network")));
       
       // create the new thread
       playersListenerThread = new Thread(playersListener);
       playersListenerThread.setDaemon(true);

       updateTitle(cxn.getIp() + ":" + cxn.getPort());
       logArea.setText("");
       log("[INFO] Connected to " + cxn.getIp() + " at port " + cxn.getPort());
       setComponentsEnabled(true);
       SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            connectMenuItem.setText("Disconnect");
         }
       });

       // start the player list thread
       if (playersListenerThread.isAlive())
       {
         playersListenerThread.notify();
       } else
       {
          playersListenerThread.start();
       }
    }

   private void setComponentsEnabled(final boolean enabled)
   {
      SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            logArea.setEnabled(enabled);
            commandField.setEnabled(enabled);
            sendButton.setEnabled(enabled);
         }
      });
   }

   private synchronized void disconnect()
   {
      playersListener.kill();
      cxn.close();
      cxn = null;
      updateTitle("MC Remote Admin");
      setComponentsEnabled(false);
      SwingUtilities.invokeLater(new Runnable() {
         public void run()
         {
            connectMenuItem.setText("Connect");
         }
       });

   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel advancedPanel;
   private javax.swing.JTextField commandField;
   private javax.swing.JMenuItem connectMenuItem;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenu jMenu3;
   private javax.swing.JMenu jMenu4;
   private javax.swing.JMenu jMenu5;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JMenuItem jMenuItem1;
   private javax.swing.JMenuItem jMenuItem10;
   private javax.swing.JMenuItem jMenuItem2;
   private javax.swing.JMenuItem jMenuItem3;
   private javax.swing.JMenuItem jMenuItem4;
   private javax.swing.JMenuItem jMenuItem5;
   private javax.swing.JMenuItem jMenuItem6;
   private javax.swing.JMenuItem jMenuItem7;
   private javax.swing.JMenuItem jMenuItem8;
   private javax.swing.JMenuItem jMenuItem9;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTextArea logArea;
   private javax.swing.JList playerList;
   private javax.swing.JPanel pluginPanel;
   private javax.swing.JTabbedPane pluginsPane;
   private javax.swing.JMenuItem preferencesMenuItem;
   private javax.swing.JMenuItem quitMenuItem;
   private javax.swing.JButton sendButton;
   private javax.swing.JPanel settingsPanel;
   private javax.swing.JPanel statusPanel;
   private javax.swing.JMenu toolsMenu;
   // End of variables declaration//GEN-END:variables

   private void log(String message)
   {
      message = message.trim();
      //System.out.println("logging: " + message);
      logArea.append(message + "\n");
   }

   public void handle(int code, String... messages)
   {
      if (code == DataHandler.MESSAGE)
      {
         if (reroute == REROUTE_NONE)
         {
            String message = (messages.length == 0) ? null : messages[0];
            log(message);
         } else if (reroute == REROUTE_PLAYERSLISTENER)
         {
            System.out.println("Rerouting to REROUTE_PLAYERSLISTENER,"
                    + " class of listener is: " + playersListener.getClass().getName());
            if (!(playersListener instanceof DirtyPlayersListener))
            {
               String message = (messages.length == 0) ? null : messages[0];
               log(message);
               setReroute(REROUTE_NONE);
            } else {
               System.out.println("DirtyPlayersHandler handling message: " + messages[0]);
               ((DirtyPlayersListener) playersListener).handle(messages[0]);
            }
         }
      } else if (code == DataHandler.END_OF_STREAM)
      {
         System.out.println("Handling EOS code: " + code);
         if (cxn != null)
         {
            JOptionPane.showMessageDialog(this, "Disconnected.","Error", JOptionPane.WARNING_MESSAGE);
            disconnect();
         }
      } else if (code == DataHandler.TIMEOUT)
      {
         log("Connection timed out.");
         setComponentsEnabled(false);
      }
   }

   public void send(String command)
   {
      cxn.sendCommand(command);
   }

   private void updatePlayerList(String[] players)
   {
      //System.out.println("Players: " + Arrays.deepToString(players));

      String[] currPlayerStrs = new String[playerListModel.size()];
      playerListModel.copyInto(currPlayerStrs);
      ArrayList<String> currentList = new ArrayList<String>();
      currentList.addAll(Arrays.asList(currPlayerStrs));
      //System.out.println("Current Players: " + Arrays.deepToString(currPlayerStrs));
      
      ArrayList<String> updatedList = new ArrayList<String>();
      updatedList.addAll(Arrays.asList(players));

      ArrayList<String> concurrentList = new ArrayList<String>();

      for (String player : updatedList)
      {
         for (String currentPlayer : updatedList)
         {
            //System.out.println(player + "=" + currentPlayer + "?");
            if (player.equals(currentPlayer))
            {
               concurrentList.add(player);
            }
         }
      }

      //System.out.print("Concurrent list: " + concurrentList.toString());
      //System.out.println(" Updated list: " + updatedList.toString());

      if (concurrentList.size() > currentList.size()) // player(s) joined
      {
         for (String currentPlayer : concurrentList)
         {
            if (!currentList.contains(currentPlayer))
            {
               // the currentPlayer joined
               //System.out.println("Adding: " + currentPlayer);
               playerListModel.addElement(currentPlayer);
            }
         }
      } else if (currentList.size() < concurrentList.size()) // player left
      {
         for (String currentPlayer : currentList)
         {
            if (!concurrentList.contains(currentPlayer))
            {
               // the currentPlayer joined
               //System.out.println("Removing: " + currentPlayer);
               playerListModel.removeElement(currentPlayer);
            }
         }
      } else {
         //System.out.println("No users to add or remove");
      }


   }

   private class DirtyPlayersListener extends PlayersListener implements Runnable
   {
      protected void kill()
      {
         keepRunning = false;
      }

      protected void handle(String message)
      {
         message = message.trim();
         final String SEARCH_STR = "Connected players:";
         //System.out.println("listener thread handling: " + message);
         int playersListIndex = message.indexOf(SEARCH_STR) + SEARCH_STR.length();
         String playersList = message.substring(playersListIndex).trim();
         //System.out.println("Players: {" + playersList + "}");
         String[] playersArray = playersList.split(",");
         updatePlayerList(playersArray);
         setReroute(REROUTE_NONE);
      }

      public void run()
      {
         while (keepRunning && cxn != null)
         {
            try {
               Thread.sleep(3000);
               System.out.println("Setting reroute to PLAYERSLISTENER");
               setReroute(REROUTE_PLAYERSLISTENER);
               send("list");
            } catch (InterruptedException ex) {
               Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException npe)
            {
               keepRunning = false;
            }
            
         }
      }
   }

   private void fallback()
   {
       JOptionPane.showMessageDialog(this, "Couldn't connect to MineQuery.\n"
               + "Reverting to dirty listener.","Warning", JOptionPane.WARNING_MESSAGE);
       playersListenerThread.interrupt();
       /* try {
          playersListenerThread.join(1000);
       } catch (InterruptedException ex) {
          Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
       } */
       playersListener = new DirtyPlayersListener();
       playersListenerThread = new Thread(playersListener);
       playersListenerThread.start();
   }

   private class MineQueryPlayersListener extends PlayersListener implements Runnable
   {
      protected void kill()
      {
         keepRunning = false;
      }
      
      public void run()
      {
         while (keepRunning && mqc != null)
         {
            try {
               Thread.sleep(3000);
               updatePlayerList(mqc.getPlayers());
            } catch (IOException ex) {
               keepRunning = false;
               fallback();
            } catch (InterruptedException ex) {
               Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
      }
   }

   private abstract class PlayersListener implements Runnable
   {
      protected boolean keepRunning = true;
      protected abstract void kill();
   }

}
